jv 
	intro, background


webgl @philogb
	
	what is webgl
		api to access gpu

		france mobiliy
			40000 counties - web gl can actually handle

		wind patterns
			binary array buffer to combpress data
			dump data in and explore without lag

		surface explorer	
			mac calc, uses loop to show parameterization

		temperatue anomalise


		realtime data analysis

			color decomposition
				use transperent shape to prevent ocuculsion

		story telling
			ian machlin - eye catching, imendly isnteresting

		scientfic viz
			line intergral convultions
				build to use the gpu, no lag
				show fields

		data art
			twitter revine loops
				fractual space filling algorthism
				only possible with webgl


	webgl api
		js api store an array of floats in a buffer that can be access by the gpu

		glsl api - pipeline of processes that gets handled by the gpu
			vertex shader
				1 to 1 mapping between input and output points
				programable

			fragment shader
				looks at more than one point

			
			vertex shader

			triangle assubly
				not programable, tranforams points into faces

			rasterization
				3d shapes get translated into picutes

			fragment shader



			glsl - dsl for graphics
				c-ish
				build in types for graphics - vectors, matrics, 
				build in functions for graphics - reflect
				operator overload! 



			hopf fibration
				explore 4-d shapes by projecting into 3d
				sterographic project preservers spheres across dimension projection

				instanced arrays

				fibers view

				interactions
					everything renders effeintly, can't click on anything

				hover only gives you color
					each pixes maps to a unique color
					decode color position


	uses gpu - million+ object, fast

	low level - use threejs, philogl, stackjs

	opencl, diferent spec



mapping the cosmos
  


nigel homes - humor
	chartjunk!

	contex matters!

	CONTEX

	no permission given to tuffte - not bitter about it

	in print, a magizing, a galler, interacting on a computer

	contect by making people smile

	friendly, approchable

	humor, good humor, good feelings and emotions

	emotions v intellect


	data visualizers v inforgraphics

	editing, not simplifying but clarifying

	don't show everything!

	design differently for different medium

	don't be seducded by new tech - mozart wrote bad music for the harmonic




the human side being a digitla practitor
	our tools are soo utitrain - why?

	expression v. utility

	our tools are expressive and have interntions


	visual music - emtionally distill what 
		cell drawing animations is so tedious

	augmented - like tween js

	two-js renders to webjl,svg, canvas.
		very processing like


	why make a tool?
		learning
		community
		reusabilty




blindfolded cartography - bostography
	axis maps: interactive web maps

	designin interactive maps for data you can't see yet

	traditional cartography allows for perfectionism

	tale of compromises

	classifcation
		john nelson - don't lie with data

		distriubtions in design v. reality

		will the map  be useful and look good
		will the chrt be useful and look good
		are the breaks meaningful
			if you're mapping income, maybe show a break at the poverty line
			diverging, show a break at the mid point
		are the breaks understandable
			std dev isn't intutufi
		are the breaks pretty numbers

		jenks naturla breaks

		quantile breaks
			guardiness spread of colors

		use percentiles

		percentiles based on unique values



	density
		circles overlap - sort by size


	handling missing years


	text
		max height and overflow auto

		thoughtfull about how you abrivate - maybe last digit is most signifiengt

		mind your number formating 
			plural
			spacing

			1000 thosound ? just say 1 million
				axis and scale ticks are nice!


  lorem ipsum map
  	roth and harrower can be quire determential

  	map design doesn't match UI, looks ugly

  	bad fake data can also text your code

  	smart dummy data - carolyn fish
  		use OSM to stand in for more complete but inaccessible data





  kosara - storytelling and data
  	why
  		stories are all around us
  		we are really good with them


	    stories make you pay attenetion

	    memomery, stickyness
	    	how do you tell parts of stories to market

	    not for exploration or analysis, but communtication
	    when you want to change people's minds

	    like velco, just more hooks
	    	you have to remember to remember something else
	    	stories are those pieces of connected tissues



    how
    	techniques
    		connected satter plot
	    		transforms from sparse set of circles
	    		to a story that you read over time with annoations

	      isotypes
	      	turn firgures into stories and remember them better than bars


	  neil coh, visual narrative structutre; cognitive side of comics
	  	eipr


	  scrolling isn't great, thinks are demeractied like steps so we struggle to remember (what?)


	  oh man, everyone rememebers who the women in the story was
	  zeigarnik effect - we rememeber things that are unfinished
	  	waiters remembered orders very well, until they were payed, then they forgot




Lichen
	visual programming to encorage collaberation with non programmers

	show predictive model, client side js


hannah fairfield
	start with blocks


interactive data vis with react - ilya boyandin
	mid and large scale vis at interactive things

	flexiable, scalable compent model

	facetes/personal - > engaging


	state is hard

	grammer of graphics
		we can declaritivly define a graphic



	d3 reusable chart
		component model
		how to handle state
		data flow

	how do we compose components


	model view controller

	d3 in view


	get app state right
	define how state is rendered


	Æ’: app state -> DOM


	requires full render on state change

	virtual DOM


	React.render(
		React.DOM.div({className:'greeting' }, 'Hello!'),
		document.body
	)

	JSX transpiles to js
	React.render(
		<div className='greeting'>Hello</div>
		document.body
	)


	animation
		react doesn't excel
		use t to tween, but that requires diff on every tick
		very slow for particle simulation

		transition group sort of works?
		react tween state

		devolp stuff without animatinos


	flux
	relay
	immutable-js
		clojure light
		libery for sets maps array, shouldComponentUpdate becomes very effient


	state internal or external to compenent

	shouldComponentUpdate
		stops us from doing expensive computations on every rerender

	server side rendering
		better for seo


	dev tools 
	hot code reloading - webpack

	testing?




Datavis on a deadline - Alyson Hurt
	cooking is hard - half hour recipe takes like an hour and half!
	mise en place

	preping everything ahead of time makes everything go more quickly

	set up tools and processes ahead of time

	our tools
		macs
		s3
		flask
		bake out flat files to s3
		static sites - no mainence, handle traffic better

		little bit of python, mostly js + d3


	how to set up your computer
		whenever someone starts,
		they start from schratch following the blog post and update it


	version control
		copying/editing on the serer is not the way to go

	style guide

	starter code
		big standalone
			- clone the app template


		smaller works that are embed
			- preset bar, area, chart
			do it once and reuse
			but not composeable - essiently just automating copying and pasting between projects, but there's gotta be a better way


		design patterns
			- responsive
			- lock the aspect ration; 4/3
			- adjust tick marks, move labels around
			- just destroy and redraw for simple charts

			- css media queries to shift columns into stacked rows


		use google spreadsheets as a minicms
			copy text from python - ginatext
			key value pairs
			refer to keys on template 

			but all text in the project into the google spreadsheet


			also put structred data in a spreadsheet
				just write as json to use with d3


			configuration

		archieml uses google docs, a little more natural for writing long

		seperate code and text
			WORK IN PUBLIC
			lawyers cool with us open sourcing code

		manage larger assets in .gitignore assets folder
			publish out to s3, push to all users
			no versions, assume they don't change


		crime clearence rates


		embedding
			all in on iframes to encapslate work


		how to they handle updates to old projects
			probably not









user centered visualization research - lane harrison
	exploratory - expository
	demand accurate and precise data vis


	building the same things over and over again
	how do i make a more opitimal design choice

	scatter plot v parell v line v stack bar chart
	8 c 2 -> lots of pairs to test!

	use model base eval instead
		models of performance and be dompared directly and effiiently
		they are scalable and falsiable
		to be effective, avoid overfitting etc, models need to be grounded in theory

	psychophysiological methodoology


	weber's law
		9 charts w/ bivarite data




Dominikus Baur - Weighing performance against pain
	paper is great!

	or maybe tufte stone sctuputers

	doesn't matter for simple things, like bar charts


	oecd better life index
		orginal version was in flash
			fast built in!
			but propertary and killed

		40 canvas elements being moved around the screen
			awkwardly written
			little condiations, very weird

	as smooth as ryan gosling
		everything in web gl


	apple caved, webgl on ios!!


	on broadway
		canvas
			redraw v scale

		30 mb of images

	performance basics
		know when to stop

		know your tools

		remove things

		debounce/throttle

		shift things
			webworker

		are you smarter than chrome's/ff/safari's dev team

		reflow
		repaint

		vis detach



	canvas
		have to keep track of your own objects
		know what to draw, when to draw it

		render loop
			input
			update state
			render


		request animation frame

		input is partiucally hard



	webGL
		only get to work with triangles and textures

		GLSL

		pixi three




msr - big data
	elmqvist hiegharcal arggration 2010

	wickham 
	bin summerize and smooth





predication
	visualize process of model building and selection



css
	transform
		position
		scale

	transition
		property time easie

	animation	
		keyframes

	good at
		with predetermined motnion
		between two states

	bad at
		dynamic motnion
		physics
		multi state animation


	purpose and style

	timing
		mood emotion
		reaction

	cubic-bezier

	secondary action

	SPEED IT UP

	alltherightmoves vld

	fivesimplesteps





earth
	





























what do the frameworks add
	structure to code
	better templating - constructing trees w/ js is a pain
	data flow between compenents
	getting data bound to the parent from a child or a grand child w/ d3 isn't easy





calderwood

emobied viewing
	visual processing

	loops, cycles

	storytelling













