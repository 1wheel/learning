library(datasets)
states <- data.frame(state.x77, abb=state.abb, region=state.region, division=state.division)
colnames(states)
states[1,]
colnames(states)
typeof(states[1,])
head(states[,3])
head(states$Illiteracy)
states[states$division=="New England", "Illiteracy"]
states[states$region=="South", "Illiteracy"]
summary(states$HS.Grad)
head(100*(states$HS.Grad/(100-states$Illiteracy)))
with(states, head(100*(HS.Grad/(100-Illiteracy))))
plot(Illiteracy~Frost, data=states)
table.of.logarithms <- vector(length=7,mode="numeric")
table.of.logarithms
for (i in 1:length(table.of.logarithms)) {
table.of.logarithms[i] <- log(i)
}
table.of.logarithms
abs(-3:3)
ifelse(x^2 > 1, 2*abs(x)-1, x^2)
x <- 1:1000
ifelse(x^2 > 1, 2*abs(x)-1, x^2)
switch(type.of.summary,
mean=mean(states$Murder),
median=median(states$Murder),
histogram=hist(states$Murder),
"I don't understand")
switch('mean',
mean=mean(states$Murder),
median=median(states$Murder),
histogram=hist(states$Murder),
"I don't understand")
switch('histogram',
mean=mean(states$Murder),
median=median(states$Murder),
histogram=hist(states$Murder),
"I don't understand")
library(MASS)
data(Cars93)
View(Cars93)
summary(Cars93)
nrow(Cars93)
Cars93[Cars93$DriveTrain == 'Rear']
mean(Cars93[Cars93$DriveTrain == 'Rear',Price])
mean(Cars93[Cars93$DriveTrain == 'Rear',"Price"])
min(Cars93[Cars93$Passengers > 6,"HorsePower"])
Cars93[Cars93$Passengers > 6,"HorsePower"]
Cars93[Cars93$Passengers == 6,"HorsePower"]
Cars93[Cars93$Passengers == 6,"Horsepower"]
min(Cars93[Cars93$Passengers > 6,"Horsepower"])
min(Cars93[Cars93$Passengers > 5,"Horsepower"])
max(Cars93$MPG.highway)
max(Cars93$MPG.highway*Cars93$Fuel.tank.capacity)
factory.function <- function (cars.output=1, trucks.output=1) {
factory <- matrix(c(40,1,60,3),nrow=2,
dimnames=list(c("labor","steel"),c("cars","trucks")))
available <- c(1600,70); names(available) <- rownames(factory)
slack <- c(8,1); names(slack) <- rownames(factory)
output <- c(cars.output, trucks.output); names(output) <- colnames(factory)
passes <- 0 # How many times have we  been around the loop?
repeat {
passes <- passes + 1
needed <- factory %*% output # What do we need for that output level?
# If we're not using too much, and are within the slack, we're done
if (all(needed <= available) &&
all((available - needed) <= slack)) {
break()
}
# If we're using too much of everything, cut back by 10%
if (all(needed > available)) {
output <- output * 0.9
next()
}
# If we're using too little of everything, increase by 10%
if (all(needed < available)) {
output <- output * 1.1
next()
}
# If we're using too much of some resources but not others, randomly
# tweak the plan by up to 10%
# runif == Random number, UNIFormly distributed, not "run if"
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
return(output)
}
factory.function()
factory.function()
factory.function()
factory.function()
factory.function()
factory.function <- function (cars.output=1, trucks.output=1) {
factory <- matrix(c(40,1,60,3),nrow=2,
dimnames=list(c("labor","steel"),c("cars","trucks")))
available <- c(1600,70); names(available) <- rownames(factory)
slack <- c(8,1); names(slack) <- rownames(factory)
output <- c(cars.output, trucks.output); names(output) <- colnames(factory)
passes <- 0 # How many times have we  been around the loop?
repeat {
passes <- passes + 1
needed <- factory %*% output # What do we need for that output level?
# If we're not using too much, and are within the slack, we're done
if (all(needed <= available) &&
all((available - needed) <= slack)) {
break()
}
# If we're using too much of everything, cut back by 10%
if (all(needed > available)) {
output <- output * 0.9
next()
}
# If we're using too little of everything, increase by 10%
if (all(needed < available)) {
output <- output * 1.1
next()
}
# If we're using too much of some resources but not others, randomly
# tweak the plan by up to 10%
# runif == Random number, UNIFormly distributed, not "run if"
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output$passes = passes
return(output)
}
factory.function()
factory.function()
{
factory <- matrix(c(40,1,60,3),nrow=2,
dimnames=list(c("labor","steel"),c("cars","trucks")))
available <- c(1600,70); names(available) <- rownames(factory)
slack <- c(8,1); names(slack) <- rownames(factory)
output <- c(cars.output, trucks.output); names(output) <- colnames(factory)
passes <- 0 # How many times have we  been around the loop?
repeat {
passes <- passes + 1
needed <- factory %*% output # What do we need for that output level?
# If we're not using too much, and are within the slack, we're done
if (all(needed <= available) &&
all((available - needed) <= slack)) {
break()
}
# If we're using too much of everything, cut back by 10%
if (all(needed > available)) {
output <- output * 0.9
next()
}
# If we're using too little of everything, increase by 10%
if (all(needed < available)) {
output <- output * 1.1
next()
}
# If we're using too much of some resources but not others, randomly
# tweak the plan by up to 10%
# runif == Random number, UNIFormly distributed, not "run if"
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output[3] = passes
return(output)
}
factory.function <- function (cars.output=1, trucks.output=1) {
factory <- matrix(c(40,1,60,3),nrow=2,
dimnames=list(c("labor","steel"),c("cars","trucks")))
available <- c(1600,70); names(available) <- rownames(factory)
slack <- c(8,1); names(slack) <- rownames(factory)
output <- c(cars.output, trucks.output); names(output) <- colnames(factory)
passes <- 0 # How many times have we  been around the loop?
repeat {
passes <- passes + 1
needed <- factory %*% output # What do we need for that output level?
# If we're not using too much, and are within the slack, we're done
if (all(needed <= available) &&
all((available - needed) <= slack)) {
break()
}
# If we're using too much of everything, cut back by 10%
if (all(needed > available)) {
output <- output * 0.9
next()
}
# If we're using too little of everything, increase by 10%
if (all(needed < available)) {
output <- output * 1.1
next()
}
# If we're using too much of some resources but not others, randomly
# tweak the plan by up to 10%
# runif == Random number, UNIFormly distributed, not "run if"
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output[3] = passes
return(output)
}
factory.function()
actory.function <- function (cars.output=1, trucks.output=1) {
factory <- matrix(c(40,1,60,3),nrow=2,
dimnames=list(c("labor","steel"),c("cars","trucks")))
available <- c(1600,70); names(available) <- rownames(factory)
slack <- c(8,1); names(slack) <- rownames(factory)
output <- c(cars.output, trucks.output); names(output) <- colnames(factory)
passes <- 0 # How many times have we  been around the loop?
repeat {
passes <- passes + 1
needed <- factory %*% output # What do we need for that output level?
# If we're not using too much, and are within the slack, we're done
if (all(needed <= available) &&
all((available - needed) <= slack)) {
break()
}
# If we're using too much of everything, cut back by 10%
if (all(needed > available)) {
output <- output * 0.9
next()
}
# If we're using too little of everything, increase by 10%
if (all(needed < available)) {
output <- output * 1.1
next()
}
# If we're using too much of some resources but not others, randomly
# tweak the plan by up to 10%
# runif == Random number, UNIFormly distributed, not "run if"
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
output[3] = passes
return(output, available)
}
factory.function()
source('~/.active-rstudio-document', echo=TRUE)
factory.function <- function (cars.output=1, trucks.output=1) {
factory <- matrix(c(40,1,60,3),nrow=2,
dimnames=list(c("labor","steel"),c("cars","trucks")))
available <- c(1600,70); names(available) <- rownames(factory)
slack <- c(8,1); names(slack) <- rownames(factory)
output <- c(cars.output, trucks.output); names(output) <- colnames(factory)
passes <- 0 # How many times have we  been around the loop?
repeat {
passes <- passes + 1
needed <- factory %*% output # What do we need for that output level?
# If we're not using too much, and are within the slack, we're done
if (all(needed <= available) &&
all((available - needed) <= slack)) {
break()
}
# If we're using too much of everything, cut back by 10%
if (all(needed > available)) {
output <- output * 0.9
next()
}
# If we're using too little of everything, increase by 10%
if (all(needed < available)) {
output <- output * 1.1
next()
}
# If we're using too much of some resources but not others, randomly
# tweak the plan by up to 10%
# runif == Random number, UNIFormly distributed, not "run if"
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
print(needed)
output[3] = passes
return(output)
}
factory.function()
factory.function(cars.output=30, trucks.output=20)
ca_pa <- read.table('http://www.stat.cmu.edu/~cshalizi/uADA/13/hw/01/calif_penn_2011.csv')
nrow(ca_pa)
ncol(ca_pa)
colSums(apply(ca_pa,c(1,2),is.na))
ca_pa <- read.table('http://www.stat.cmu.edu/~cshalizi/uADA/13/hw/01/calif_penn_2011.csv')
ca_pa <- read.cs('http://www.stat.cmu.edu/~cshalizi/uADA/13/hw/01/calif_penn_2011.csv')
ca_pa <- read.csv('http://www.stat.cmu.edu/~cshalizi/uADA/13/hw/01/calif_penn_2011.csv')
nrow(ca_pa)
ncol(ca_pa)
colSums(apply(ca_pa,c(1,2),is.na))
check <- apply(ca_pa,c(1,2),is.na)
View(check)
View(check)
View(ca_pa)
View(ca_pa)
apply(ca_pa, 1, sum)
apply(ca_pa, 2, sum)
nna <- na.omit(ca_pa)
nrow(nna)
nrow(ca_pa)
plot(nna$Built_2005_or_latter, nna$Median_house_value)
plot(nna$Built_2005_or_latter~nna$Median_house_value)
plot(nna$Built_2005_or_later~nna$Median_house_value)
library(ggplot2)
ggplot2(nna, aes(Built_2005_or_latter, Median_house_value)) + geom_point(color=STATEFP)
ggplot(nna, aes(Built_2005_or_latter, Median_house_value)) + geom_point(color=STATEFP)
ggplot(nna, aes(Built_2005_or_latter, Median_house_value)) + geom_point()
ggplot(nna, aes(Built_2005_or_latter, Median_house_value))
ggplot(nna, aes(Built_2005_or_latter))
ggplot(nna, aes(Built_2005_or_latter)) + geom_histogram()
nna
ggplot(nna, aes(Built_2005_or_latter)) + geom_histogram()
> ggplot(ca_na, aes(Built_2005_or_latter)) + geom_histogram()
ggplot(ca_na, aes(Built_2005_or_latter)) + geom_histogram()
ggplot(ca_pa, aes(Built_2005_or_latter)) + geom_histogram()
ggplot(y13, aes(SATVRMID, SATMTMID)) + geom_point(alpha=.2)
ggplot(ca_pa, aes(SATVRMID, SATMTMID)) + geom_point(alpha=.2)
nna <- na.omit(ca_pa)
View(nna)
View(nna)
ggplot(ca_pa, aes(POPULATION, SATMTMID)) + geom_point(alpha=.2)
ggplot(ca_pa, aes(POPULATION, LATITUDE)) + geom_point(alpha=.2)
ggplot(ca_pa, aes(POPULATION, Median_house_value)) + geom_point(alpha=.2)
ggplot(nna, aes(POPULATION, Median_house_value)) + geom_point(alpha=.2)
ggplot(nna, aes(Built_2005_or_later, Median_house_value)) + geom_point(alpha=.2)
ggplot(nna, aes(Built_2005_or_later, Median_house_value)) + geom_point(color=STATEFP)
ggplot(nna, aes(Built_2005_or_later, Median_house_value, color=STATEFP)) + geom_point()
ggplot(nna, aes(Built_2005_or_later, Median_house_value, color=STATEFP)) + geom_point(alpha=.5)
ggplot(nna, aes(Built_2005_or_later, Median_house_value, color=STATEFP)) + geom_point(alpha=.1)
nna$vrate <- nna$Vacant_units/nna$Total_units
summary(nna$vrate)
