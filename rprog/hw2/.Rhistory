libary(datasets)
library(datasets)
cars
summary(cars)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a <- makeVector(c(5,1,3))
a
a$get
a$get()
a$getmean()
a$setmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(5,1,3))
a$getMean()
a$getmean()
A = matrix(
+   c(2, 4, 3, 1, 5, 7), # the data elements
+   nrow=2,              # number of rows
+   ncol=3,              # number of columns
+   byrow = TRUE)        # fill matrix by rows
A
B = matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
B = matrix( c(2, 4, 3, 1, 5, 7), nrow=3, ncol=2)
B
solve(B)
source('~/.active-rstudio-document', echo=TRUE)
solve(B)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverseSetVal) inverse <<- inverseSetVal
getinverse <- function() inverse
list(set = set, get = get,
setmean = setinverse,
getmean = getinverse)
}
cachemean <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("inverse cached")
} else{
data <- x$get()
inverse <- solve(data, ...)
x$setmean(inverse)
}
inverse
}
makeCacheMatrix(B)
cm = makeCacheMatrix(B)
cm$get
cm$get()
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverseSetVal) inverse <<- inverseSetVal
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachemean <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("inverse cached")
} else{
data <- x$get()
inverse <- solve(data, ...)
x$setmean(inverse)
}
inverse
}
cm = makeCacheMatrix(B)
c = cachemean(cm)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverseSetVal) inverse <<- inverseSetVal
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheinverse <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("inverse cached")
} else{
data <- x$get()
inverse <- solve(data, ...)
x$setmean(inverse)
}
inverse
}
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverseSetVal) inverse <<- inverseSetVal
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheinverse <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("inverse cached")
} else{
data <- x$get()
inverse <- solve(data, ...)
x$setmean(inverse)
}
inverse
}
B = matrix( c(2, 4, 3, 1), nrow=2, ncol=2)
cm = makeCacheMatrix(B)
c = cacheinverse(cm)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverseSetVal) inverse <<- inverseSetVal
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheinverse <- function(x, ...) {
inverse <- 0 #x$getinverse()
if(!is.null(inverse)) {
message("inverse cached")
} else{
data <- x$get()
inverse <- solve(data, ...)
x$setmean(inverse)
}
inverse
}
B = matrix( c(2, 4, 3, 1), nrow=2, ncol=2)
cm = makeCacheMatrix(B)
c = cacheinverse(cm)
cm$getinverse()
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverseSetVal) inverse <<- inverseSetVal
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheinverse <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("inverse cached")
} else{
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
}
inverse
}
B = matrix( c(2, 4, 3, 1), nrow=2, ncol=2)
cm = makeCacheMatrix(B)
c = cacheinverse(cm)
c = cacheinverse(cm)
c
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rnorm(100)
dnorm(10)
