bestHosRate = hos[[field]]
}
}
bestHosName = 'zzzzzz'
bestHosRate = 99999999999
for (i in 1:nrow(outcome)){
hos <- outcome[i]
isState <- hos$State == state
isBestRate <- hos[[field]] < bestHosRate
isTieWinner <- hos[[field]] == bestHosRate && hos$Name < bestHosName
if (isState && (isBestRate || isTieWinner)){
bestHosName = hos$Name
bestHosRate = hos[[field]]
}
}
isState
isBestRate
isTieWinner
hos[[field]] < bestHosRate
hos[[field]]
hos
for (i in 1:nrow(outcome)){
hos <- outcome[[i]]
isState <- hos$State == state
isBestRate <- hos[[field]] < bestHosRate
isTieWinner <- hos[[field]] == bestHosRate && hos$Name < bestHosName
if (isState && (isBestRate || isTieWinner)){
bestHosName = hos$Name
bestHosRate = hos[[field]]
}
}
hos
i = 10
hos <- outcome[[i]]
hos
hos <- outcome[i,]
hos
hos <- outcome[i,]
isState <- hos$State == state
isBestRate <- hos[[field]] < bestHosRate
isTieWinner <- hos[[field]] == bestHosRate && hos$Name < bestHosName
if (isState && (isBestRate || isTieWinner)){
bestHosName = hos$Name
bestHosRate = hos[[field]]
}
bestHosName
isState
isBestRate
hos[[field]]
field
typeof(hos[[field]])
as.numeric(hos[[field]])
bestHosName = 'zzzzzz'
bestHosRate = 99999999999
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
isState <- hos$State == state
isBestRate <- val < bestHosRate
isTieWinner <- val == bestHosRate && hos$Name < bestHosName
if (isState && (isBestRate || isTieWinner)){
bestHosName = hos$Name
bestHosRate = val
}
}
isState
isBestRate
isTieWinner
val == bestHosRate
hos$Name < bestHosName
bestHosName
bestHosName = 'zzzzzz'
bestHosRate = 99999999999
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
isState <- hos$State == state
isBestRate <- val < bestHosRate
isTieWinner <- val == bestHosRate && hos$Name < bestHosName
if (isState && (isBestRate || isTieWinner)){
bestHosName = hos$Name
bestHosRate = val
}
}
bestHosRate
bestHosName = 'zzzzzz'
bestHosRate = 99999999999
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
isState <- hos$State == state
isBestRate <- val < bestHosRate
isTieWinner <- val == bestHosRate && hos$Name < bestHosName
if (isState && hos$Name && (isBestRate || isTieWinner)){
bestHosName = hos$Name
bestHosRate = val
}
}
bestHosName = 'zzzzzz'
bestHosRate = 99999999999
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
isState <- hos$State == state
isBestRate <- val < bestHosRate
isTieWinner <- val == bestHosRate && hos$Name < bestHosName
if (isState && !is.null(hos$Name) && (isBestRate || isTieWinner)){
bestHosName = hos$Name
bestHosRate = val
}
}
bestHosName
bestHosRate
i <- 123
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
isState <- hos$State == state
isBestRate <- val < bestHosRate
isTieWinner <- val == bestHosRate && hos$Name < bestHosName
if (isState && !is.null(hos$Name) && (isBestRate || isTieWinner)){
bestHosName = hos$Name
bestHosRate = val
}
hos$Name
hos
bestHosName = 'zzzzzz'
bestHosRate = 99999999999
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
isState <- hos$State == state
isBestRate <- val < bestHosRate
isTieWinner <- val == bestHosRate && hos$Hospital.Name   < bestHosName
if (isState && (isBestRate || isTieWinner)){
bestHosName = hos$Hospital.Name
bestHosRate = val
}
}
hos
hos$Hospital.Name
bestHosName
val == bestHosRate && hos$Hospital.Name < bestHosName
isState && (isBestRate || isTieWinner)
isState
isBestRate
val
is.na(val)
bestHosName = 'zzzzzz'
bestHosRate = 99999999999
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
isState <- hos$State == state
isBestRate <- val < bestHosRate
isTieWinner <- val == bestHosRate && hos$Hospital.Name < bestHosName
if (isState && !is.na(val) && (isBestRate || isTieWinner)){
bestHosName = hos$Hospital.Name
bestHosRate = val
}
}
bestHosName
bestHosRate
best <- function(state, outcome){
##read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if (outcome == 'heart attack'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
} else if (outcome == 'heart failure'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
} else if (outcome == 'pneumona'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumona'
} else{
stop('invalid outcome')
}
max <- 99999999999
bestHosName = 'zzzzzz'
bestHosRate = 99999999999
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
isState <- hos$State == state
isBestRate <- val < bestHosRate
isTieWinner <- val == bestHosRate && hos$Hospital.Name < bestHosName
if (isState && !is.na(val) && (isBestRate || isTieWinner)){
bestHosName = hos$Hospital.Name
bestHosRate = val
}
}
#throw error if invalid state
if (max == bestHosRate){
stop('invalid state')
}
##return hospital name in that state with lowest 30-day death rate
bestHosName
}
best('TX', 'heart failure')
best <- function(state, outcomeType){
##read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if (outcomeType == 'heart attack'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
} else if (outcomeType == 'heart failure'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
} else if (outcomeType == 'pneumona'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumona'
} else{
stop('invalid outcome')
}
max <- 99999999999
bestHosName = 'zzzzzz'
bestHosRate = 99999999999
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
isState <- hos$State == state
isBestRate <- val < bestHosRate
isTieWinner <- val == bestHosRate && hos$Hospital.Name < bestHosName
if (isState && !is.na(val) && (isBestRate || isTieWinner)){
bestHosName = hos$Hospital.Name
bestHosRate = val
}
}
#throw error if invalid state
if (max == bestHosRate){
stop('invalid state')
}
##return hospital name in that state with lowest 30-day death rate
bestHosName
}
best('TX', 'heart failure')
length(outcome)
size(outcome)
rankhospital <- function(state, outcomeType, num = 'best'){
##read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if (outcomeType == 'heart attack'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
} else if (outcomeType == 'heart failure'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
} else if (outcomeType == 'pneumona'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumona'
} else{
stop('invalid outcome')
}
dat <- data.frame()
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
name <- hos$Hospital.Name
isState <- hos$State == state
if (isState && !is.na(val)){
dat <- rbind(dat, c(val, name))
}
}
#throw error if invalid state
if (nrow(outcome) == 0){
stop('invalid state')
}
##return hospital name in that state with lowest 30-day death rate
dat
}
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
rankhospital('TX', 'heart attack')
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
rankhospital('TX', 'heart attack')
i = 123
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
name <- hos$Hospital.Name
isState <- hos$State == state
if (isState && !is.na(val)){
dat <- rbind(dat, c(val, name))
}
name
val
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
rankhospital('TX', 'heart attack')
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
rankhospital('TX', 'heart attack')
numr(outcomes)
source('~/.active-rstudio-document', echo=TRUE)
rankhospital('TX', 'heart attack')
dat
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rankhospital('TX', 'heart attack')
i = 3898
state
state = 'TX'
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
name <- hos$Hospital.Name
isState <- hos$State == state
val
name
dat <- data.frame()
dat <- rbind(dat, c(val, name))
dat
dat <- rbind(dat, c(val, name))
dat
i = 3896
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
name <- hos$Hospital.Name
isState <- hos$State == state
isState
name
dat
val
dat <- rbind(dat, c(val, name))
dat
dat <- data.frame('val' = numeric, 'name' = character())
dddat <- data.frame('val' = numeric, 'name' = character())
dat <- data.frame('val' = numeric(), 'name' = character())
dat <- rbind(dat, c(val, name))
dat
dat <- data.frame('val' = numeric(), 'name' = character())
dat
dat <- rbind(dat, c(val, name))
dat
nros(dat)
nrow(dat)
dat <- data.frame('val' = numeric(), 'name' = character())
dat[nrow(dat) + 1,] <- c(val, name)
dat
dat <- data.frame('val' = numeric(), 'name' = character(), stringAsFactors=FALSE)
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
rankhospital('TX', 'heart attack')
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
rankhospital('TX', 'heart attack')
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
i = 1314
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
name <- hos$Hospital.Name
isState <- hos$State == state
dat
dat <- data.frame()
dat
dat <- rbind(dat, c(val, as.character(name)))
dat
i = 1231
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
name <- hos$Hospital.Name
dat <- rbind(dat, c(val, as.character(name)))
dat
class(name)
dat <- data.frame(stringsAsFactors=FALSE)
dat <- rbind(dat, c(val, as.character(name)))
dat
dat <- rbind(dat, c(val, 'sdf'))
dat[3,] = c(val, 'sdf')
dat <- data.frame(stringsAsFactors=FALSE)
dat[1,] = c(val, 'sdf')
dat
data.frame(goB = character(10), value=numeric(10),stringsAsFactors=FALSE)
data.frame(goB = character(0), value=numeric(0),stringsAsFactors=FALSE)
dat <- data.frame(goB = character(0), value=numeric(0),stringsAsFactors=FALSE)
dat
dat[1,] = c(val, 'sdf')
dat[1,] = c(val, 'sddff')
dat[2,] = c(val, 'fffsddff')
dat
dat[nrow(dat) + 1,] <- c(123, '123121')
dat
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
dat <- rankhospital('TX', 'heart attack')
dat[with[dat, order(val, name)]]
dat[with(dat, order(val, name)), ]
dat
dat[0]
dat[1]
dat[1,]
dat[1,]$name
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
dat
num
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
rankhospital("TX", "heart failure", 4)
state = 'TX'
outcomeType = 'heart failure'
if (outcomeType == 'heart attack'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
} else if (outcomeType == 'heart failure'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
} else if (outcomeType == 'pneumona'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumona'
} else{
stop('invalid outcome')
}
dat <- data.frame(val=numeric(0), name=character(), stringsAsFactors=FALSE)
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
name <- hos$Hospital.Name
isState <- hos$State == state
if (isState && !is.na(val)){
dat[nrow(dat) + 1,] <- c(val, as.character(name))
}
}
#throw error if invalid state
if (nrow(outcome) == 0){
stop('invalid state')
}
#sort
dat <- dat[with(dat, order(val, name)), ]
if (num == 'best'){
return(dat[1,]$name)
} else if(num == 'worse'){
return(dat[nrow(dat),]$name)
} else{
return(dat[num,]$name)
}
num = 5
dat
typeof(dat)
dat[1,1]
dat
dat <- data.frame(val=numeric(0), name=character(0), stringsAsFactors=FALSE)
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
name <- hos$Hospital.Name
isState <- hos$State == state
if (isState && !is.na(val)){
dat[nrow(dat) + 1,] <- c(val, as.character(name))
}
}
#throw error if invalid state
if (nrow(outcome) == 0){
stop('invalid state')
}
#sort
dat <- dat[with(dat, order(val, name)), ]
dat
sapply(dat, class)
dat[,1] <- as.numeric(dat[,1])
dat <- dat[with(dat, order(val, name)), ]
sapply(dat, class)
dat
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
sapply(dat, class)
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
state = 'MD'
num = 'worst'
outcomeType = '"heart attack"'
outcomeType = "heart attack"
if (outcomeType == 'heart attack'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
} else if (outcomeType == 'heart failure'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
} else if (outcomeType == 'pneumona'){
field <- 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumona'
} else{
stop('invalid outcome')
}
dat <- data.frame(val=numeric(0), name=character(0), stringsAsFactors=FALSE)
for (i in 1:nrow(outcome)){
hos <- outcome[i,]
val <- as.numeric(hos[[field]])
name <- hos$Hospital.Name
isState <- hos$State == state
if (isState && !is.na(val)){
dat[nrow(dat) + 1,] <- c(val, as.character(name))
}
}
#throw error if invalid state
if (nrow(outcome) == 0){
stop('invalid state')
}
#sort
dat[,1] <- as.numeric(dat[,1])
dat <- dat[with(dat, order(val, name)), ]
dat
dat[nrow(dat),]
dat[nrow(dat),]$name
if (num == 'best'){
return(dat[1,]$name)
} else if(num == 'worse'){
return(dat[nrow(dat),]$name)
} else{
return(dat[num,]$name)
}
a = function(){
if (num == 'best'){
return(dat[1,]$name)
} else if(num == 'worse'){
return(dat[nrow(dat),]$name)
} else{
return(dat[num,]$name)
}
}
a()
num == 'worse'
num
source('~/Desktop/learning/rprog/hw3/rankhospital.R', echo=TRUE)
states = c('AK', 'AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY')
source('~/Desktop/learning/rprog/hw3/rankall.R', echo=TRUE)
head(rankall("heart attack", 20), 10)
>>>>>>> hw3
